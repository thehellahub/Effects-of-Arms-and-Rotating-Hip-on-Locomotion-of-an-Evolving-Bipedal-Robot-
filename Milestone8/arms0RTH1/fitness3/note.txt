Nicholas Hella
CS 206: Final Project Milestones 6
04/10/23

Project Description:

Of all the animals on Earth, only few express bipedal locomotion. I plan to generate bipedal robots of varying body forms (with arms, with no arms, with rotating hip, without rotating hip) and then test for which permutation of attributes the evolutionary algorithm can evolve the fastest (or most successful) gait (forward motion).


Progress Note:

In my last milestone I said I would complete the following

1.) Toggle how often a PHC run (not a generation, but a full PHC run) initializes from a previous brain (as opposed to a new brain with completely random weights) to avoid getting stuck in local optima 
2.) Run the algorithm on many PHC runs, each with a large population size and number of generations (increasing the values for PHC_RUNS, POPULATION_SIZE, and NUMBER_OF_GENERATIONS)
3.) Serialize the PHC_Wrapper class-level dictionary, phc_run__2__fitness_scores_per_generation_of_best_parent, so that I can write side-scripts that can plot/visualize the progress of my algorithm
4.) Write the side scripts that plot/visualize the progress of my algorithm and run them



For this milestone, I completed all the above steps.

1.) I now have a variable in my constants file, ONE_IN_X_ODDS_OF_NEW_BRAIN, which toggles that odds that, for each new PHC run, the PHC run will inherit the brain of an old PHC run. I have set this to one in 5 odds.

2.) I have set the constant variables such that the PHC_Wrapper class calls the PARALLEL_HILL_CLIMBER class 5 times (toggled using the PHC_RUNS variable in my constants file). Each PHC runs has a population size of 10 (toggled using the POPULATION_SIZE variable), each PHC run performing over 10 generations (toggled using the NUMBER_OF_GENERATIONS variable) with each generation running for 1000 iterations (toggled using the ITERATIONS variable). I modified my code to track how long the training takes, and with these settings my code runs for 18.3 hours.

3.) I serialize the phc_run__2__fitness_scores_per_generation_of_best_parent as a pickle file at the end of the PHC_Wrapper class, with the file name making it obvious as to whether the data is for a robot with arms, without arms, with a rotating hip, without a rotating hip.

4.) I wrote a side-file, fitness_plotter.py, which reads in the serialized pickle file containing the phc_run__2__fitness_scores_per_generation_of_best_parent dictionary and plots the data using a library called "bokeh". The plots show the fitness progress for each PHC run, across all the PHC runs. 


Video Demonstration: https://youtu.be/0zT5EELObsA

Fitness Plot: https://imgur.com/a/RfXVjMF

Demonstrated in the video is a robot (with arms and with a rotating hip) attempting to walk after 18 hours of training. The fitness function is no more than the product of how far the robot moved in the X direction and the final Z coordinate of the head. We can see in the plot that the third PHC run started from a new brain and escaped getting trapped in the local optima of PHC runs 1-3. 

My next steps:

In our last lecture (lecture 20), Prof Bongard showed a slide about tranaferability where one of the metrics captured in the fitness/behavioral function was the mean height of the robot during travel. I'd like to incorporate this into my own fitness function, as well as tracking the amount of time the robot was standing upright (where Z coordinate of the head is greater than half the body height) during its travels. I'll then use my fitness plotter to track how the changes to the fitness function improve/impair the ability/improvement of the evoutionary algorithm. For each fitness function I want to test, I'll run the evolutionary algorithm against each of the body permutations (arms, no arms, rotating hip, no rotating hip) and plot their progressions to show which attributes were most successful in producing forward locomotion. I may also reduce the overall size of the robot to a third of its current size, to help with balancing.. 


